<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HugeGraph – Quick Start</title><link>/cn/docs/quickstart/</link><description>Recent content in Quick Start on HugeGraph</description><generator>Hugo -- gohugo.io</generator><atom:link href="/cn/docs/quickstart/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: HugeGraph (OLTP)</title><link>/cn/docs/quickstart/hugegraph/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/cn/docs/quickstart/hugegraph/</guid><description/></item><item><title>Docs: HugeGraph ToolChain</title><link>/cn/docs/quickstart/toolchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/cn/docs/quickstart/toolchain/</guid><description/></item><item><title>Docs: HugeGraph-AI</title><link>/cn/docs/quickstart/hugegraph-ai/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/cn/docs/quickstart/hugegraph-ai/</guid><description>
&lt;blockquote>
&lt;p>请参阅 AI 仓库的 &lt;a href="https://github.com/apache/incubator-hugegraph-ai/tree/main/hugegraph-llm#readme">README&lt;/a> 以获取最新的文档，官网会&lt;strong>定期&lt;/strong>更新同步。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>AI 总结项目文档：&lt;a href="https://deepwiki.com/apache/incubator-hugegraph-ai">&lt;img src="https://deepwiki.com/badge.svg" alt="Ask DeepWiki">&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-摘要">1. 摘要&lt;/h2>
&lt;p>&lt;code>hugegraph-llm&lt;/code> 是一个用于实现和研究大语言模型相关功能的工具。
该项目包含可运行的演示（demo），也可以作为第三方库使用。&lt;/p>
&lt;p>众所周知，图系统可以帮助大模型解决时效性和幻觉等挑战，
而大模型则可以帮助图系统解决成本相关的问题。&lt;/p>
&lt;p>通过这个项目，我们旨在降低图系统的使用成本，并减少构建知识图谱的复杂性。
本项目将为图系统和大语言模型提供更多的应用和集成解决方案。&lt;/p>
&lt;ol>
&lt;li>通过 LLM + HugeGraph 构建知识图谱&lt;/li>
&lt;li>使用自然语言操作图数据库 (Gremlin/Cypher)&lt;/li>
&lt;li>知识图谱补充答案上下文 (GraphRAG → Graph Agent)&lt;/li>
&lt;/ol>
&lt;h2 id="2-环境要求">2. 环境要求&lt;/h2>
&lt;blockquote>
&lt;p>[!IMPORTANT]&lt;/p>
&lt;ul>
&lt;li>python 3.10+ (未在 3.12 中测试)&lt;/li>
&lt;li>hugegraph-server 1.3+ (建议使用 1.5+)&lt;/li>
&lt;li>uv 0.7+&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="3-准备工作">3. 准备工作&lt;/h2>
&lt;h3 id="31-docker">3.1 Docker&lt;/h3>
&lt;p>&lt;strong>Docker 部署&lt;/strong>  
   您也可以使用 Docker 来部署 HugeGraph-AI：
   - 确保您已安装 Docker
   - 我们提供两个容器镜像：
     - &lt;strong>镜像 1&lt;/strong>: &lt;a href="https://hub.docker.com/r/hugegraph/rag/tags">hugegraph/rag&lt;/a>  
       用于构建和运行 RAG 功能，适合快速部署和直接修改源码
     - &lt;strong>镜像 2&lt;/strong>: &lt;a href="https://hub.docker.com/r/hugegraph/rag-bin/tags">hugegraph/rag-bin&lt;/a>  
       使用 Nuitka 编译的 C 二进制转译版本，性能更好、更高效
   - 拉取 Docker 镜像：
     &lt;code>bash      docker pull hugegraph/rag:latest # 拉取镜像1      docker pull hugegraph/rag-bin:latest # 拉取镜像2      &lt;/code>
   - 启动 Docker 容器：
     &lt;code>bash      docker run -it --name rag -v /path/to/.env:/home/work/hugegraph-llm/.env -p 8001:8001 hugegraph/rag bash      docker run -it --name rag-bin -v /path/to/.env:/home/work/hugegraph-llm/.env -p 8001:8001 hugegraph/rag-bin bash      &lt;/code>
   - 启动 Graph RAG 演示：
     ```bash
     # 针对镜像 1
     python ./src/hugegraph_llm/demo/rag_demo/app.py # 或运行 python -m hugegraph_llm.demo.rag_demo.app&lt;/p>
&lt;p>     # 针对镜像 2
     ./app.dist/app.bin
     ```
   - 访问接口 http://localhost:8001&lt;/p>
&lt;h3 id="32-从源码构建">3.2 从源码构建&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>启动 HugeGraph 数据库，您可以通过 &lt;a href="https://hub.docker.com/r/hugegraph/hugegraph">Docker&lt;/a>/&lt;a href="https://hugegraph.apache.org/docs/download/download/">二进制包&lt;/a> 运行它。
    有一个使用 docker 的简单方法：  
    &lt;code>bash    docker run -itd --name=server -p 8080:8080 hugegraph/hugegraph     &lt;/code>  
   更多指引请参阅详细文档 &lt;a href="/docs/quickstart/hugegraph/hugegraph-server/#31-use-docker-container-convenient-for-testdev">doc&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配置 uv 环境，使用官方安装器安装 uv，其他安装方法请参见 &lt;a href="https://docs.astral.sh/uv/configuration/installer/">uv 文档&lt;/a>。
    &lt;code>bash     # 如果遇到网络问题，可以尝试使用 pipx 或 pip 安装 uv，详情请参阅 uv 文档     curl -LsSf [https://astral.sh/uv/install.sh](https://astral.sh/uv/install.sh) | sh  - # 安装最新版本，如 0.7.3+     &lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>克隆本项目
    &lt;code>bash     git clone [https://github.com/apache/incubator-hugegraph-ai.git](https://github.com/apache/incubator-hugegraph-ai.git)     &lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配置依赖环境
    &lt;code>bash     cd incubator-hugegraph-ai/hugegraph-llm     uv venv &amp;amp;&amp;amp; source .venv/bin/activate     uv pip install -e .     &lt;/code>  
    如果由于网络问题导致依赖下载失败或过慢，建议修改 &lt;code>hugegraph-llm/pyproject.toml&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>启动 &lt;strong>Graph RAG&lt;/strong> 的 Gradio 交互式演示，运行以下命令，然后在浏览器中打开 http://127.0.0.1:8001。
    &lt;code>bash     python -m hugegraph_llm.demo.rag_demo.app  # 等同于 &amp;quot;uv run xxx&amp;quot;     &lt;/code>
    默认主机是 &lt;code>0.0.0.0&lt;/code>，端口是 &lt;code>8001&lt;/code>。您可以通过传递命令行参数 &lt;code>--host&lt;/code> 和 &lt;code>--port&lt;/code> 来更改它们。  
    &lt;code>bash     python -m hugegraph_llm.demo.rag_demo.app --host 127.0.0.1 --port 18001     &lt;/code>
   &lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行 Web 演示后，将在路径 &lt;code>hugegraph-llm/.env&lt;/code> 下自动生成配置文件 &lt;code>.env&lt;/code>。此外，还将在路径 &lt;code>hugegraph-llm/src/hugegraph_llm/resources/demo/config_prompt.yaml&lt;/code> 下生成一个与提示（prompt）相关的配置文件 &lt;code>config_prompt.yaml&lt;/code>。
    您可以在网页上修改内容，触发相应功能后，更改将自动保存到配置文件中。您也可以直接修改文件而无需重启 Web 应用；刷新页面即可加载您的最新更改。
    (可选) 要重新生成配置文件，您可以使用 &lt;code>config.generate&lt;/code> 并加上 &lt;code>-u&lt;/code> 或 &lt;code>--update&lt;/code> 参数。  
    &lt;code>bash     python -m hugegraph_llm.config.generate --update     &lt;/code>
    注意：&lt;code>Litellm&lt;/code> 支持多个 LLM 提供商，请参阅 &lt;a href="https://docs.litellm.ai/docs/providers">litellm.ai&lt;/a> 进行配置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>(&lt;strong>可选&lt;/strong>) 您可以使用
    &lt;a href="/docs/quickstart/toolchain/hugegraph-hubble/#21-use-docker-convenient-for-testdev">hugegraph-hubble&lt;/a>
    来访问图数据，可以通过 &lt;a href="https://hub.docker.com/r/hugegraph/hubble">Docker/Docker-Compose&lt;/a>
    运行它以获取指导。(Hubble 是一个图分析仪表盘，包括数据加载/Schema管理/图遍历/展示功能)。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>(&lt;strong>可选&lt;/strong>) 离线下载 NLTK 停用词  
    &lt;code>bash     python ./hugegraph_llm/operators/common_op/nltk_helper.py     &lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>[!TIP]  
您也可以参考我们的&lt;a href="https://github.com/apache/incubator-hugegraph-ai/blob/main/hugegraph-llm/quick_start.md">快速入门&lt;/a>文档来了解如何使用它以及基本的查询逻辑 🚧&lt;/p>
&lt;/blockquote>
&lt;h2 id="4-示例">4. 示例&lt;/h2>
&lt;h3 id="41-通过-llm-在-hugegraph-中构建知识图谱">4.1 通过 LLM 在 HugeGraph 中构建知识图谱&lt;/h3>
&lt;h4 id="411-通过-gradio-交互界面构建知识图谱">4.1.1 通过 Gradio 交互界面构建知识图谱&lt;/h4>
&lt;p>&lt;strong>参数说明：&lt;/strong>  &lt;/p>
&lt;ul>
&lt;li>Docs（文档）:
  - text: 从纯文本构建 RAG 索引
  - file: 上传文件，文件应为 &lt;u>.txt&lt;/u> 或 &lt;u>.docx&lt;/u> (可同时选择多个文件)&lt;/li>
&lt;li>&lt;a href="https://hugegraph.apache.org/docs/clients/restful-api/schema/">Schema&lt;/a> (模式): (除&lt;strong>两种类型&lt;/strong>外)
  - 用户自定义 Schema (JSON 格式, 遵循此&lt;a href="https://github.com/apache/incubator-hugegraph-ai/blob/aff3bbe25fa91c3414947a196131be812c20ef11/hugegraph-llm/src/hugegraph_llm/config/config_data.py#L125">模板&lt;/a>进行修改)
  - 指定 HugeGraph 图实例的名称，它将自动从中获取 Schema (例如 &lt;strong>&amp;ldquo;hugegraph&amp;rdquo;&lt;/strong>)&lt;/li>
&lt;li>Graph extract head (图谱抽取提示头): 用户自定义的图谱抽取提示&lt;/li>
&lt;li>如果已存在图数据，您应点击 &amp;ldquo;&lt;strong>Rebuild vid Index&lt;/strong>&amp;rdquo; (重建顶点ID索引) 来更新索引&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://hugegraph.apache.org/docs/images/gradio-kg.png" alt="gradio-配置">&lt;/p>
&lt;h4 id="412-通过代码构建知识图谱">4.1.2 通过代码构建知识图谱&lt;/h4>
&lt;p>&lt;code>KgBuilder&lt;/code> 类用于构建知识图谱。以下是简要使用指南：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>初始化&lt;/strong>: &lt;code>KgBuilder&lt;/code> 类使用一个语言模型的实例进行初始化。该实例可以从 &lt;code>LLMs&lt;/code> 类中获取。
    初始化 LLMs 实例，获取 LLM，然后为图谱构建创建一个任务实例 &lt;code>KgBuilder&lt;/code>。&lt;code>KgBuilder&lt;/code> 定义了多个算子，用户可以根据需要自由组合它们。(提示: &lt;code>print_result()&lt;/code> 可以在控制台中打印每一步的结果，而不影响整体执行逻辑)&lt;/li>
&lt;/ol>
&lt;p>    &lt;code>python     from hugegraph_llm.models.llms.init_llm import LLMs     from hugegraph_llm.operators.kg_construction_task import KgBuilder         TEXT = &amp;quot;&amp;quot;     builder = KgBuilder(LLMs().get_chat_llm())     (         builder         .import_schema(from_hugegraph=&amp;quot;talent_graph&amp;quot;).print_result()         .chunk_split(TEXT).print_result()         .extract_info(extract_type=&amp;quot;property_graph&amp;quot;).print_result()         .commit_to_hugegraph()         .run()     )     &lt;/code>
    &lt;img src="https://hugegraph.apache.org/docs/images/kg-uml.png" alt="gradio-配置-uml">
2. &lt;strong>导入 Schema&lt;/strong>: &lt;code>import_schema&lt;/code> 方法用于从一个来源导入 Schema。来源可以是一个 HugeGraph 实例、一个用户定义的 Schema 或一个抽取结果。可以链接 &lt;code>print_result&lt;/code> 方法来打印结果。
    &lt;code>python     # 从 HugeGraph 实例导入 Schema     builder.import_schema(from_hugegraph=&amp;quot;xxx&amp;quot;).print_result()     # 从抽取结果导入 Schema     builder.import_schema(from_extraction=&amp;quot;xxx&amp;quot;).print_result()     # 从用户定义的 Schema 导入     builder.import_schema(from_user_defined=&amp;quot;xxx&amp;quot;).print_result()     &lt;/code>
3. &lt;strong>分块切分&lt;/strong>: &lt;code>chunk_split&lt;/code> 方法用于将输入文本切分成块。文本应作为字符串参数传递给该方法。
    &lt;code>python     # 将输入文本切分成文档     builder.chunk_split(TEXT, split_type=&amp;quot;document&amp;quot;).print_result()     # 将输入文本切分成段落     builder.chunk_split(TEXT, split_type=&amp;quot;paragraph&amp;quot;).print_result()     # 将输入文本切分成句子     builder.chunk_split(TEXT, split_type=&amp;quot;sentence&amp;quot;).print_result()     &lt;/code>
4. &lt;strong>提取信息&lt;/strong>: &lt;code>extract_info&lt;/code> 方法用于从文本中提取信息。文本应作为字符串参数传递给该方法。
    &lt;code>python     TEXT = &amp;quot;Meet Sarah, a 30-year-old attorney, and her roommate, James, whom she's shared a home with since 2010.&amp;quot;     # 从输入文本中提取属性图     builder.extract_info(extract_type=&amp;quot;property_graph&amp;quot;).print_result()     # 从输入文本中提取三元组     builder.extract_info(extract_type=&amp;quot;property_graph&amp;quot;).print_result()     &lt;/code>
5. &lt;strong>提交到 HugeGraph&lt;/strong>: &lt;code>commit_to_hugegraph&lt;/code> 方法用于将构建的知识图谱提交到一个 HugeGraph 实例。
    &lt;code>python     builder.commit_to_hugegraph().print_result()     &lt;/code>
6. &lt;strong>运行&lt;/strong>: &lt;code>run&lt;/code> 方法用于执行链式操作。
    &lt;code>python     builder.run()     &lt;/code>
    &lt;code>KgBuilder&lt;/code> 类的方法可以链接在一起以执行一系列操作。&lt;/p>
&lt;h3 id="42-基于-hugegraph-的检索增强生成-rag">4.2 基于 HugeGraph 的检索增强生成 (RAG)&lt;/h3>
&lt;p>&lt;code>RAGPipeline&lt;/code> 类用于将 HugeGraph 与大语言模型集成，以提供检索增强生成的能力。
以下是简要使用指南：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>提取关键词&lt;/strong>: 提取关键词并扩展同义词。
    &lt;code>python     from hugegraph_llm.operators.graph_rag_task import RAGPipeline     graph_rag = RAGPipeline()     graph_rag.extract_keywords(text=&amp;quot;告诉我关于 Al Pacino 的事情。&amp;quot;).print_result()     &lt;/code>&lt;/li>
&lt;li>&lt;strong>从关键词匹配顶点ID&lt;/strong>: 在图中用关键词匹配节点。
    &lt;code>python     graph_rag.keywords_to_vid().print_result()     &lt;/code>&lt;/li>
&lt;li>&lt;strong>查询图以进行 RAG&lt;/strong>: 从 HugeGraph 中检索相应的关键词及其多跳关联关系。
     &lt;code>python      graph_rag.query_graphdb(max_deep=2, max_graph_items=30).print_result()      &lt;/code>&lt;/li>
&lt;li>&lt;strong>重排搜索结果&lt;/strong>: 根据问题和结果之间的相似度对搜索结果进行重排序。
     &lt;code>python      graph_rag.merge_dedup_rerank().print_result()      &lt;/code>&lt;/li>
&lt;li>&lt;strong>综合答案&lt;/strong>: 总结结果并组织语言来回答问题。
    &lt;code>python     graph_rag.synthesize_answer(vector_only_answer=False, graph_only_answer=True).print_result()     &lt;/code>&lt;/li>
&lt;li>&lt;strong>运行&lt;/strong>: &lt;code>run&lt;/code> 方法用于执行上述操作。
    &lt;code>python     graph_rag.run(verbose=True)     &lt;/code>&lt;/li>
&lt;/ol></description></item><item><title>Docs: HugeGraph Computing (OLAP)</title><link>/cn/docs/quickstart/computing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/cn/docs/quickstart/computing/</guid><description/></item><item><title>Docs: HugeGraph Client</title><link>/cn/docs/quickstart/client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/cn/docs/quickstart/client/</guid><description/></item></channel></rss>